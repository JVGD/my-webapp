version: "3"

tasks:
  setup_env:
    desc: Set up the env vars
    cmds:
      - cp .env.example .env
    sources:
      - .env.example

  setup_git:
    desc: Remove existing .git directory to start a new git history
    cmds:
      - rm -rf .git
      - git init
      - git add *
      - git add .dockerignore .env.example .gitignore .pre-commit-config.yaml .python-version
      - git commit -m "First commit üöÄ"
    sources:
      - .git/**

  install:
    desc: Install all dependencies including development tools
    cmds:
      - uv sync --all-groups
    sources:
      - pyproject.toml
      - uv.lock
    generates:
      - .venv/**/*

  setup_precommit:
    desc: Set up pre-commit hooks
    deps: [install]
    cmds:
      - uv run pre-commit install

  setup:
    desc: Set up the project (install dependencies, remove .git)
    deps: [setup_env, setup_git, install, setup_precommit]

  format:
    desc: Format code using ruff
    deps: [install]
    cmds:
      - uv run ruff format .

  lint:
    desc: Run all linting tools
    deps: [install]
    cmds:
      - uv run ruff check --fix .

  type_check:
    desc: Run type checking using mypy
    deps: [install]
    cmds:
      - uv run mypy src/ tests/

  test:
    desc: Run all tests with coverage
    deps: [install]
    cmds:
      - uv run pytest --cov=src tests/

  qa:
    desc: Run all quality assurance tasks (format, lint, type_check) in order
    deps: [install]
    cmds:
      - task: format
      - task: lint
      - task: type_check
      - task: test

  run:
    desc: Run the streamlit application
    deps: [install]
    cmds:
      - uv run streamlit run src/app.py

  clean:
    desc: Clean up generated files
    cmds:
      - rm -rf .mypy_cache/
      - rm -rf .pytest_cache/
      - rm -rf .ruff_cache/
      - rm -rf .task/
      - rm -rf .coverage
      - find ./* -type d -name "__pycache__" -exec rm -r {} +
      - find . -type d -name "*.egg-info" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete

  build:
    desc: Build Docker image
    deps: [clean]
    summary: |
      Build a Docker image for the project.

      Usage:
        task build                    # Build with default tag
        task build TAG=my-app:v1.0.0  # Build with custom tag

      Examples:
        task build TAG=myproject:latest
        task build TAG=myproject:dev
    vars:
      TAG: '{{.TAG | default "python-repo-template:latest"}}'
    cmds:
      - docker build -t {{.TAG}} .
    sources:
      - Dockerfile
      - pyproject.toml
      - uv.lock
      - src/**/*

  rename:
    desc: Rename template package to your project name
    summary: |
      Rename the template package and module to your project name.
      This updates all imports and file references automatically.

      Usage:
        task rename                        # Use default name (my_package)
        task rename NAME=your_package      # Use custom package name
    deps: [clean]
    vars:
      NAME: '{{.NAME | default "my_package"}}'
    preconditions:
      - sh: 'test "{{.NAME}}" != "template_package"'
        msg: "‚ùå Please provide a different name than 'template_package'. Usage: task rename NAME=your_package"
      - sh: 'test -d "src/template_package"'
        msg: "ü§î Project already renamed. 'src/template_package' not found."
    cmds:
      - echo "üöÄ Renaming template_package to {{.NAME}}"
      - |
        find src tests pyproject.toml -type f -print0 | \
        xargs -0 sed -i.bak 's/template_package/{{.NAME}}/g'
      - mv src/template_package src/{{.NAME}}
      - mv tests/template_package tests/{{.NAME}}
      - find . -name "*.bak" -type f -delete
      - echo "‚úÖ Renamed to {{.NAME}}!"
